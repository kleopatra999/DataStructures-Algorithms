
hi
hi



A = [["a", 1], ["b", 2]]  sorted all elements have different names
B = [["a", 2], ["c", 3]]  sorted

C = [["a", 3], ["b", 2], ["c", 3]]  sorted

merge A B

int sizeA = A.length;
int sizeA1 = A[0].length;
int sizeB = B.length;
int sizeB1 = B[0].length;
HashMap map = new HashMap();

for(int i=0; i<sizeA; i++) {
    if(map.containsKey(A[i]) {
        map.put(A[i], map.get(A[i] + A[i][]); 
    } else {
       map.put(A[i], A[i][]);
    }
}
for(int i=0; i<sizeB; i++) {
    if(map.containsKey(B[i]) {
        map.put(B[i], map.get(B[i]+B[i][]);
    } else {
       map.put(B[i], B[i][]);
    }
}

//
for(int i=0;i<map.size();i++) {
    c[i] = map.getKey(i);  
    c[i][] = map.get(C[i]);
}
    
Sort(c[i]);

two pointers 
ptrA = 0;
ptrB = 0;
ptrC = 0;

a1 a2
b1 b2

while(!ptrA == (A.length-1) && (!ptrB == (B.length-1)) {
    if a[ptrA][] == b[ptrB][] {
     c[ptrC][] = a[ptrA][];
     c[][j] = a[][j]+ b[]][j]
    }
    
    
    //compare currentPtrA with currentPtrB, 
        if currentPtrA < currentPtrB
            Map.put(CurrentPtrA.value)
            currentPtrA++;
        if currentPtrA > currentPtrB
        
        
        

given two nodes of a binary tree, tell me the number of nodes on the path between the two nodes.

      1
     2  3
     4
     
     4, 3 -> (4-2-1-3): 4
     //common ancestor
    leftSubtreePathCount + rightSubtreePathCount + 1
    
       Node nodeA, nodeB;
   
    subtreePathCount(Node root, Node nodeA, Node nodeB;) {
        if(root.value == null) {
            return null;
        }
        if(root.value == nodeA.value) || (root.value == nodeB.value) {
            return 1;
        }
        return subtreePathCount(root.left) + subtreePathCount(root.right) + 1;
    }

        
        
        
        
        